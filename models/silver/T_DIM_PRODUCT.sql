{{ config(
    materialized='incremental', 
    unique_key=['product_sk']
) }}

WITH SOURCE_DATA AS (

    SELECT
        CAST(TRIM(I0ITM) AS INTEGER) AS ITEM_NUMBER,
        CAST(TRIM(I0DESC) AS VARCHAR(40)) AS ITEM_DESCRIPTION,
        CAST(TRIM(I0CLCD) AS INTEGER) AS CLASS_CODE,
        CAST(TRIM(I0PROD) AS VARCHAR(11)) AS PRODUCT_CODE,
        CAST(TRIM(I0SIZE) AS VARCHAR(20)) AS SIZE,
        CAST(TRIM(I0PRSZ) AS VARCHAR(3)) AS PRODUCT_SIZE,
        CAST(TRIM(I0PLY) AS VARCHAR(5)) AS PLY,
        CAST(TRIM(I0MFCD) AS VARCHAR(20)) AS MANUFACTURER_CODE,
        CAST(TRIM(I0TXCD) AS INTEGER) AS TAX_CODE,
        CAST(TRIM(I0WGHT) AS NUMERIC(9,2)) AS WEIGHT,
        CAST(TRIM(I0FDTX) AS NUMERIC(9,2)) AS FEDERAL_TAX,
        CAST(TRIM(I0BSCS) AS NUMERIC(9,2)) AS BASE_COST,
        CAST(TRIM(I0NTBC) AS NUMERIC(9,2)) AS NET_BILL_COST,
        CAST(TRIM(I0UNCS) AS NUMERIC(9,2)) AS UNIT_COST,
        CAST(TRIM(I0AVCS) AS NUMERIC(9,2)) AS AVERAGE_COST,
        CAST(TRIM(I0FRCS) AS NUMERIC(9,2)) AS FREIGHT_COST,
        CAST(TRIM(I0CSCS) AS NUMERIC(9,2)) AS CASING_COST,
        CAST(TRIM(I0CS01) AS NUMERIC(9,2)) AS MISC_COST_01,
        CAST(TRIM(I0CS02) AS NUMERIC(9,2)) AS MISC_COST_02,
        CAST(TRIM(I0CS03) AS NUMERIC(9,2)) AS MISC_COST_03,
        CAST(TRIM(I0CS04) AS NUMERIC(9,2)) AS MISC_COST_04,
        CAST(TRIM(I0CS05) AS NUMERIC(9,2)) AS MISC_COST_05,
        CAST(TRIM(I0CS06) AS NUMERIC(9,2)) AS MISC_COST_06,
        CAST(TRIM(I0CS07) AS NUMERIC(9,2)) AS MISC_COST_07,
        CAST(TRIM(I0CS08) AS NUMERIC(9,2)) AS MISC_COST_08,
        CAST(TRIM(I0CS09) AS NUMERIC(9,2)) AS MISC_COST_09,
        CAST(TRIM(I0CS10) AS NUMERIC(9,2)) AS MISC_COST_10,
        CAST(TRIM(I0IVDN) AS INTEGER) AS INVENTORY_VENDOR_NUMBER,
        CAST(TRIM(I0GPCD) AS INTEGER) AS GP_CODE,
        CAST(TRIM(I0PCCD) AS VARCHAR(1)) AS PC_SWITCH,
        CAST(TRIM(I0SBCD) AS INTEGER) AS SUB_CODE,
        CAST(TRIM(I0LPDT) AS INTEGER) AS LAST_PRICE_CHANGE_DATE,
        CAST(TRIM(I0SFCD) AS INTEGER) AS SPIFF_CODE,
        CAST(TRIM(I0EQOH) AS VARCHAR(1)) AS EFFECTS_QOH_FLAG,
        CAST(TRIM(I0SRSZ) AS VARCHAR(20)) AS ALPHA_SEARCH_SIZE,
        CAST(TRIM("I0SRS#") AS VARCHAR(20)) AS NUMERIC_SEARCH_SIZE,
        CAST(TRIM(I0CTCD) AS INTEGER) AS CATEGORY_CODE,
        CAST(TRIM(I0PRC1) AS NUMERIC(9,3)) AS PRICE_1,
        CAST(TRIM(I0PRC2) AS NUMERIC(9,3)) AS PRICE_2,
        CAST(TRIM(I0DSIT) AS VARCHAR(1)) AS DISCONTINUED_ITEM_FLAG,
        CAST(TRIM(I0CSIT) AS VARCHAR(1)) AS CONSIGNMENT_ITEM_FLAG,
        CAST(TRIM(I0CSRQ) AS VARCHAR(1)) AS COST_REQUIRED_AT_POS_FLAG,

        NULL::VARCHAR AS DO_NOT_AVERAGE_COST_FLAG,
        NULL::VARCHAR AS ROAD_HAZARD_ITEM_FLAG,
        NULL::VARCHAR AS RETREAD_STOCK_FLAG,
        NULL::VARCHAR AS STATE_TIRE_FEE_EXEMPT_FLAG,
        NULL::VARCHAR AS REVENUE_STREAM_CODE,
        NULL::VARCHAR AS REVENUE_STREAM_NAME,
        TO_TIMESTAMP_NTZ(TRIM(ENTRY_TIMESTAMP)) AS ENTRY_TIMESTAMP,

        MD5(CONCAT_WS('|',
            COALESCE(TRIM(I0DESC), ''),
            COALESCE(CAST(TRIM(I0CLCD) AS VARCHAR), ''),
            COALESCE(TRIM(I0PROD), ''),
            COALESCE(TRIM(I0SIZE), ''),
            COALESCE(TRIM(I0PRSZ), ''),
            COALESCE(TRIM(I0MFCD), ''),
            COALESCE(CAST(TRIM(I0WGHT) AS VARCHAR), ''),
            COALESCE(CAST(TRIM(I0FDTX) AS VARCHAR), '')
        )) AS RECORD_CHECKSUM_HASH,

        CAST(TRIM(SOURCE_SYSTEM) AS VARCHAR(100)) AS SOURCE_SYSTEM,
        CAST(TRIM(SOURCE_FILE_NAME) AS VARCHAR(255)) AS SOURCE_FILE_NAME,
        CAST(TRIM(BATCH_ID) AS VARCHAR(100)) AS BATCH_ID,
        CAST(TRIM(ETL_VERSION) AS VARCHAR(50)) AS ETL_VERSION,
        CAST(TRIM(OPERATION) AS VARCHAR(10)) AS OPERATION

    FROM {{ source('bronze_data', 'T_BRZ_ITEM_MASTER_INITEM') }}
    {% if is_incremental() %}
    WHERE ENTRY_TIMESTAMP ='1900-01-01T00:00:00Z'
        --WHERE ENTRY_TIMESTAMP > (SELECT COALESCE(MAX(EFFECTIVE_DATE), '1900-01-01') FROM {{ this }})
    {% endif %}
),

RANKED_SOURCE AS (

    SELECT
        *,
        ROW_NUMBER() OVER (PARTITION BY ITEM_NUMBER ORDER BY ENTRY_TIMESTAMP DESC) AS RN
    FROM SOURCE_DATA

),

DEDUPLICATED_SOURCE AS (

    SELECT * FROM RANKED_SOURCE WHERE RN = 1

),

SOURCE_WITH_LAG AS (

    SELECT
        CURR.*,
        LAG(RECORD_CHECKSUM_HASH) OVER (PARTITION BY ITEM_NUMBER ORDER BY ENTRY_TIMESTAMP) AS PREV_HASH
    FROM DEDUPLICATED_SOURCE CURR

),

CHANGES AS (

    SELECT * FROM SOURCE_WITH_LAG
    WHERE RECORD_CHECKSUM_HASH != PREV_HASH OR PREV_HASH IS NULL

),

deletes AS (

    SELECT *
    FROM deduplicated_source

    WHERE OPERATION = 'DELETE'

),

MAX_KEY AS (

    SELECT COALESCE(MAX(PRODUCT_SK), 0) AS MAX_SK FROM {{ this }}

),

ORDERED_CHANGES AS (

    SELECT *,
        LEAD(ENTRY_TIMESTAMP) OVER (PARTITION BY ITEM_NUMBER ORDER BY ENTRY_TIMESTAMP) AS NEXT_ENTRY_TS
    FROM CHANGES

),

JOINED_CHANGES AS (

    SELECT
        OC.*,
        dim.INVENTORY_VENDOR_SK,
        DC.INVENTORY_CLASS_SK ,
        DCAT.INVENTORY_CATEGORY_SK 
    FROM ORDERED_CHANGES OC
    LEFT JOIN {{ ref('T_DIM_INVENTORY_CLASS') }} DC
      ON oc.CLASS_CODE = dc.CLASS_ID
    LEFT JOIN {{ ref('T_DIM_INVENTORY_CATEGORY') }} DCAT
      ON OC.CATEGORY_CODE = DCAT.CATEGORY_ID
    LEFT JOIN {{ ref('T_DIM_INVENTORY_VENDOR') }} dim
      ON dim.VENDOR_NUMBER = oc.INVENTORY_VENDOR_NUMBER
     AND oc.ENTRY_TIMESTAMP BETWEEN dim.EFFECTIVE_DATE AND COALESCE(dim.EXPIRATION_DATE, '9999-12-31')

),

NEW_ROWS AS (

    SELECT
        ROW_NUMBER() OVER (ORDER BY ITEM_NUMBER, ENTRY_TIMESTAMP) + MAX_KEY.MAX_SK AS PRODUCT_SK,
        ITEM_NUMBER,
        ITEM_DESCRIPTION,
        CLASS_CODE,
        PRODUCT_CODE,
        SIZE,
        PRODUCT_SIZE,
        PLY,
        MANUFACTURER_CODE,
        TAX_CODE,
        WEIGHT,
        FEDERAL_TAX,
        BASE_COST,
        NET_BILL_COST,
        UNIT_COST,
        AVERAGE_COST,
        FREIGHT_COST,
        CASING_COST,
        MISC_COST_01,
        MISC_COST_02,
        MISC_COST_03,
        MISC_COST_04,
        MISC_COST_05,
        MISC_COST_06,
        MISC_COST_07,
        MISC_COST_08,
        MISC_COST_09,
        MISC_COST_10,
        INVENTORY_VENDOR_NUMBER,
        GP_CODE,
        PC_SWITCH,
        SUB_CODE,
        LAST_PRICE_CHANGE_DATE,
        SPIFF_CODE,
        EFFECTS_QOH_FLAG,
        ALPHA_SEARCH_SIZE,
        NUMERIC_SEARCH_SIZE,
        CATEGORY_CODE,
        PRICE_1,
        PRICE_2,
        DISCONTINUED_ITEM_FLAG,
        CONSIGNMENT_ITEM_FLAG,
        COST_REQUIRED_AT_POS_FLAG,
        DO_NOT_AVERAGE_COST_FLAG,
        ROAD_HAZARD_ITEM_FLAG,
        RETREAD_STOCK_FLAG,
        STATE_TIRE_FEE_EXEMPT_FLAG,
        REVENUE_STREAM_CODE,
        REVENUE_STREAM_NAME,
        INVENTORY_CLASS_SK,
        INVENTORY_CATEGORY_SK,
        INVENTORY_VENDOR_SK,
        ENTRY_TIMESTAMP AS EFFECTIVE_DATE,
        COALESCE(NEXT_ENTRY_TS - INTERVAL '1 SECOND', TO_TIMESTAMP_NTZ('9999-12-31 23:59:59')) AS EXPIRATION_DATE,
        CASE WHEN NEXT_ENTRY_TS IS NULL THEN TRUE ELSE FALSE END AS IS_CURRENT_FLAG,
        SOURCE_SYSTEM,
        SOURCE_FILE_NAME,
        BATCH_ID,
        RECORD_CHECKSUM_HASH,
        ETL_VERSION,
        CURRENT_TIMESTAMP() AS INGESTION_DTTM,
        CURRENT_DATE() AS INGESTION_DT

    FROM JOINED_CHANGES
    CROSS JOIN MAX_KEY

),

EXPIRED_ROWS AS (

    SELECT
        EXISTING.PRODUCT_SK,
        EXISTING.ITEM_NUMBER,
        EXISTING.ITEM_DESCRIPTION,
        EXISTING.CLASS_CODE,
        EXISTING.PRODUCT_CODE,
        EXISTING.SIZE,
        EXISTING.PRODUCT_SIZE,
        EXISTING.PLY,
        EXISTING.MANUFACTURER_CODE,
        EXISTING.TAX_CODE,
        EXISTING.WEIGHT,
        EXISTING.FEDERAL_TAX,
        EXISTING.BASE_COST,
        EXISTING.NET_BILL_COST,
        EXISTING.UNIT_COST,
        EXISTING.AVERAGE_COST,
        EXISTING.FREIGHT_COST,
        EXISTING.CASING_COST,
        EXISTING.MISC_COST_01,
        EXISTING.MISC_COST_02,
        EXISTING.MISC_COST_03,
        EXISTING.MISC_COST_04,
        EXISTING.MISC_COST_05,
        EXISTING.MISC_COST_06,
        EXISTING.MISC_COST_07,
        EXISTING.MISC_COST_08,
        EXISTING.MISC_COST_09,
        EXISTING.MISC_COST_10,
        EXISTING.INVENTORY_VENDOR_NUMBER,
        EXISTING.GP_CODE,
        EXISTING.PC_SWITCH,
        EXISTING.SUB_CODE,
        EXISTING.LAST_PRICE_CHANGE_DATE,
        EXISTING.SPIFF_CODE,
        EXISTING.EFFECTS_QOH_FLAG,
        EXISTING.ALPHA_SEARCH_SIZE,
        EXISTING.NUMERIC_SEARCH_SIZE,
        EXISTING.CATEGORY_CODE,
        EXISTING.PRICE_1,
        EXISTING.PRICE_2,
        EXISTING.DISCONTINUED_ITEM_FLAG,
        EXISTING.CONSIGNMENT_ITEM_FLAG,
        EXISTING.COST_REQUIRED_AT_POS_FLAG,
        EXISTING.DO_NOT_AVERAGE_COST_FLAG,
        EXISTING.ROAD_HAZARD_ITEM_FLAG,
        EXISTING.RETREAD_STOCK_FLAG,
        EXISTING.STATE_TIRE_FEE_EXEMPT_FLAG,
        EXISTING.REVENUE_STREAM_CODE,
        EXISTING.REVENUE_STREAM_NAME,
        EXISTING.INVENTORY_CLASS_SK,
        EXISTING.INVENTORY_CATEGORY_SK,
        EXISTING.INVENTORY_VENDOR_SK,
       EXISTING.EFFECTIVE_DATE,
        LEAST(NEW_ROWS.EFFECTIVE_DATE - INTERVAL '1 SECOND', EXISTING.EXPIRATION_DATE) AS EXPIRATION_DATE,
        FALSE AS IS_CURRENT_FLAG,
        EXISTING.SOURCE_SYSTEM,
        EXISTING.SOURCE_FILE_NAME,
        EXISTING.BATCH_ID,
        EXISTING.RECORD_CHECKSUM_HASH,
        EXISTING.ETL_VERSION,
        EXISTING.INGESTION_DTTM,
        EXISTING.INGESTION_DT
    FROM  {{ this }} EXISTING
    INNER JOIN NEW_ROWS
      ON EXISTING.ITEM_NUMBER = NEW_ROWS.ITEM_NUMBER
    WHERE EXISTING.IS_CURRENT_FLAG = TRUE
      AND EXISTING.RECORD_CHECKSUM_HASH != NEW_ROWS.RECORD_CHECKSUM_HASH

),

SOFT_DELETED_ROWS AS (

    SELECT * FROM  {{ this }}
    WHERE ITEM_NUMBER NOT IN (SELECT ITEM_NUMBER FROM NEW_ROWS)
      AND IS_CURRENT_FLAG = TRUE

),

soft_delete as (
    SELECT
        old.PRODUCT_SK,
        old.ITEM_NUMBER,
        old.ITEM_DESCRIPTION,
        old.CLASS_CODE,
        old.PRODUCT_CODE,
        old.SIZE,
        old.PRODUCT_SIZE,
        old.PLY,
        old.MANUFACTURER_CODE,
        old.TAX_CODE,
        old.WEIGHT,
        old.FEDERAL_TAX,
        old.BASE_COST,
        old.NET_BILL_COST,
        old.UNIT_COST,
        old.AVERAGE_COST,
        old.FREIGHT_COST,
        old.CASING_COST,
        old.MISC_COST_01,
        old.MISC_COST_02,
        old.MISC_COST_03,
        old.MISC_COST_04,
        old.MISC_COST_05,
        old.MISC_COST_06,
        old.MISC_COST_07,
        old.MISC_COST_08,
        old.MISC_COST_09,
        old.MISC_COST_10,
        old.INVENTORY_VENDOR_NUMBER,
        old.GP_CODE,
        old.PC_SWITCH,
        old.SUB_CODE,
        old.LAST_PRICE_CHANGE_DATE,
        old.SPIFF_CODE,
        old.EFFECTS_QOH_FLAG,
        old.ALPHA_SEARCH_SIZE,
        old.NUMERIC_SEARCH_SIZE,
        old.CATEGORY_CODE,
        old.PRICE_1,
        old.PRICE_2,
        old.DISCONTINUED_ITEM_FLAG,
        old.CONSIGNMENT_ITEM_FLAG,
        old.COST_REQUIRED_AT_POS_FLAG,
        old.DO_NOT_AVERAGE_COST_FLAG,
        old.ROAD_HAZARD_ITEM_FLAG,
        old.RETREAD_STOCK_FLAG,
        old.STATE_TIRE_FEE_EXEMPT_FLAG,
        old.REVENUE_STREAM_CODE,
        old.REVENUE_STREAM_NAME,
        old.INVENTORY_CLASS_SK,
        old.INVENTORY_CATEGORY_SK,
        old.INVENTORY_VENDOR_SK,
       old.EFFECTIVE_DATE,
        del.ENTRY_TIMESTAMP AS EXPIRATION_DATE,
        FALSE AS IS_CURRENT_FLAG,
        old.SOURCE_SYSTEM,
        old.SOURCE_FILE_NAME,
        old.BATCH_ID,
        old.RECORD_CHECKSUM_HASH,
        old.ETL_VERSION,
        old.INGESTION_DTTM,
        old.INGESTION_DT
        from {{this}} old
        join deletes del
         ON old.ITEM_NUMBER = del.ITEM_NUMBER
         AND old.IS_CURRENT_FLAG = TRUE
),

FINAL_RESULT AS (

    SELECT * FROM EXPIRED_ROWS
    UNION ALL
    SELECT * FROM NEW_ROWS
    UNION ALL
    -- SELECT * FROM SOFT_DELETED_ROWS
    SELECT * FROM soft_delete

)

SELECT * FROM FINAL_RESULT
