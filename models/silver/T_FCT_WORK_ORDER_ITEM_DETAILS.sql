{{ config(
    materialized='incremental',
    unique_key='WORK_ORDER_ITEM_DETAILS_SK'
) }}

-- Step 1: Load source data with filtering on ENTRY_TIMESTAMP for incremental runs
WITH max_loaded AS (
    SELECT COALESCE(MAX(ENTRY_TIMESTAMP), TO_TIMESTAMP_NTZ('1900-01-01')) AS max_ts FROM  {{ source('bronze_data', 'T_BRZ_ITEM_WOMSTI') }}
),

source_data AS (
    SELECT
        CAST(TRIM(W2STORE) AS NUMBER(3, 0)) AS STORE_NUMBER,
        TRIM(W2FMTP) AS FORM_TYPE_CODE,
        TRIM(W2WIPX) AS POS_PREFIX,
        CAST(TRIM(W2WO) AS NUMBER(10, 0)) AS WORK_ORDER_NUMBER,
        CAST(TRIM(W2SEQ) AS NUMBER(4, 0)) AS ITEM_SEQ_NUMBER,
        CAST(TRIM(W2ITM) AS NUMBER(10, 0)) AS PRODUCT_SK,
        TRIM(W2MFCD) AS MANUFACTURING_CODE,
        CAST(TRIM(W2QTY) AS NUMBER(7, 0)) AS QUANTITY,
        TRIM(W2SIZE) AS SIZE,
        TRIM(W2DESC) AS DESCRIPTION,
        TRIM(W2PLY) AS PLY_RATING,
        CAST(TRIM(W2PRCD) AS NUMBER(3, 0)) AS PRICE_CODE,
        CAST(TRIM(W2UNCS) AS NUMBER(9, 2)) AS UNIT_COST,
        CAST(TRIM(W2UNPR) AS NUMBER(9, 2)) AS UNIT_PRICE,
        CAST(TRIM(W2AMT) AS NUMBER(11, 2)) AS EXTENDED_AMT,
        CAST(TRIM(W2CAMT) AS NUMBER(11, 2)) AS EXTENDED_COST,
        CAST(TRIM(W2GPAM) AS NUMBER(11, 2)) AS GP_AMT,
        CAST(TRIM(W2GPMG) AS NUMBER(5, 2)) AS GP_MARGIN,
        CAST(TRIM(W2GPNM) AS NUMBER(11, 2)) AS GP_NAB_AMT,
        CAST(TRIM(W2GPNG) AS NUMBER(5, 2)) AS GP_NAB_MARGIN,
        CAST(TRIM(W2MECH) AS NUMBER(5, 0)) AS MECHANIC_NUMBER,
        CAST(TRIM(W2IEXM) AS NUMBER(11, 2)) AS ITEM_TAX_EXEMPT_AMT,
        CAST(TRIM(W2ITXB) AS NUMBER(11, 2)) AS ITEM_TAXABLE_AMT,
        CAST(TRIM(W2ISLT) AS NUMBER(11, 2)) AS ITEM_SALES_TAX_AMT,
        CAST(TRIM(W2IAMT) AS NUMBER(11, 2)) AS TOTAL_ITEM_AMT,
        TRIM(W2CSTS) AS CHARGE_FLAG,
        TRIM(W2RSTS) AS ROLLUP_TO_PARENT_FLAG,
        TRIM(W2QITM) AS QUESTION_ITEM_FLAG,
        CAST(TRIM(W2PITM) AS NUMBER(10, 0)) AS PARENT_ITEM_NUMBER,
        CAST(TRIM(W2SFCD) AS NUMBER(3, 0)) AS SPIFF_CODE,
        CAST(TRIM(W2ISAM) AS NUMBER(9, 2)) AS ITEM_SPIFF_AMT,
        CAST(TRIM(W2ISPT) AS NUMBER(7, 0)) AS ITEM_SPIFF_POINTS,
        CAST(TRIM(W2IFEE) AS NUMBER(9, 2)) AS ITEM_TIRE_FEE,
        CAST(TRIM(W2OUPR) AS NUMBER(9, 2)) AS ORGIN_UNIT_PRICE,
        TRIM(W2QSTS) AS QUESTIONS_ASKED_FLAG,
        TRIM(W2NSTS) AS NOTES_ASKED_FLAG,
        TRIM(W2VEND) AS VENDOR_NUMBER,
        TRIM(W2VDNM) AS VENDOR_NAME,
        TRIM(W2INVC) AS INVOICE_NUMBER,
        CASE 
            WHEN W2INDT = 0 THEN NULL
            ELSE TO_DATE(TO_CHAR(W2INDT), 'YYYYMMDD')
        END AS INVOICE_DATE,
        TRIM(W2RSTK) AS RETURN_TO_STOCK_FLAG,
        CAST(TRIM(W2CTCD) AS NUMBER(3, 0)) AS INVENTORY_CATEGORY_SK,
        CAST(TRIM(W2VSEQ) AS NUMBER(4, 0)) AS VEHICLE_SEQUENCE_NUMBER,
        CAST(TRIM(W2FDTX) AS NUMBER(9, 2)) AS FEDERAL_TAX,
        CAST(TRIM(W2AVCS) AS NUMBER(9, 2)) AS AVERAGE_COST,
        CAST(TRIM(W2NAVD) AS NUMBER(6, 0)) AS NAB_VENDOR_NUMBER,
        CAST(TRIM(W2NAPR) AS NUMBER(9, 2)) AS NAB_EACH_PRICE,
        CAST(TRIM(W2NADP) AS NUMBER(5, 2)) AS NAB_DEL_COM_PCT,
        CAST(TRIM(W2NADA) AS NUMBER(9, 2)) AS NAB_DEL_COM_1_AMT,
        CAST(TRIM(W2NAD2) AS NUMBER(9, 2)) AS NAB_DEL_COM_2_AMT,
        CAST(TRIM(W2NAD3) AS NUMBER(9, 2)) AS NAB_DEL_COM_3_AMT,
        CAST(TRIM(W2NAD4) AS NUMBER(9, 2)) AS NAB_DEL_COM_4_AMT,
        CAST(TRIM(W2NACD) AS NUMBER(9, 2)) AS NAB_CREDIT_DUE_AMT,
        CAST(TRIM(W2NACR) AS NUMBER(9, 2)) AS NAB_CREDIT_RECEIVED_AMT,
        CAST(TRIM(W2NACP) AS NUMBER(9, 2)) AS NAB_CREDIT_PENDING_AMT,
        CAST(TRIM(W2CAMTGP) AS NUMBER(11, 2)) AS EXTENDED_COST_GP_AMT,
        CAST(TRIM(W2AMTGP) AS NUMBER(11, 2)) AS EXTENDED_GP_AMT,
        TRIM(W2ACLN) AS ADJ_CLAIM_NUMBER,
        TRIM(W2GPDS) AS GROUP_DISCOUNT_ITEM_FLAG,
        TRIM(W2USER) AS LAST_MAINTAINED_USER,
        CAST(W2CYMD AS NUMBER(8, 0)) AS LAST_MAINTAINED_DATE,
        CAST(W2HMS AS NUMBER(6, 0)) AS LAST_MAINTAINED_TIME,
        TRIM(W2WKSN) AS LAST_MAINTAINED_WORKSTATION,

        -- ETL metadata columns
        CURRENT_TIMESTAMP() AS EFFECTIVE_DATE,
        TO_TIMESTAMP_NTZ('9999-12-31 23:59:59') AS EXPIRATION_DATE,
        TRUE AS IS_CURRENT_FLAG,

        TRIM(SOURCE_SYSTEM) AS SOURCE_SYSTEM,
        TRIM(SOURCE_FILE_NAME) AS SOURCE_FILE_NAME,
        TRIM(BATCH_ID) AS BATCH_ID,
        TRIM(ETL_VERSION) AS ETL_VERSION,
        TRIM(OPERATION) AS OPERATION,
        MD5(CONCAT(
            COALESCE(TRIM(W2STORE), ''),
            COALESCE(TRIM(W2FMTP), ''),
            COALESCE(TRIM(W2WIPX), ''),
            COALESCE(TRIM(W2WO), ''),
            COALESCE(TRIM(W2SEQ), ''),
            COALESCE(TRIM(W2ITM), ''),
            COALESCE(TRIM(W2MFCD), ''),
            COALESCE(TRIM(W2QTY), ''),
            COALESCE(TRIM(W2SIZE), ''),
            COALESCE(TRIM(W2DESC), ''),
            COALESCE(TRIM(W2PLY), ''),
            COALESCE(TRIM(W2PRCD), ''),
            COALESCE(TRIM(W2UNCS), ''),
            COALESCE(TRIM(W2UNPR), ''),
            COALESCE(TRIM(W2AMT), ''),
            COALESCE(TRIM(W2CAMT), ''),
            COALESCE(TRIM(W2GPAM), ''),
            COALESCE(TRIM(W2GPMG), ''),
            COALESCE(TRIM(W2GPNM), ''),
            COALESCE(TRIM(W2GPNG), ''),
            COALESCE(TRIM(W2MECH), ''),
            COALESCE(TRIM(W2IEXM), ''),
            COALESCE(TRIM(W2ITXB), ''),
            COALESCE(TRIM(W2ISLT), ''),
            COALESCE(TRIM(W2IAMT), ''),
            COALESCE(TRIM(W2CSTS), ''),
            COALESCE(TRIM(W2RSTS), ''),
            COALESCE(TRIM(W2QITM), ''),
            COALESCE(TRIM(W2PITM), ''),
            COALESCE(TRIM(W2SFCD), ''),
            COALESCE(TRIM(W2ISAM), ''),
            COALESCE(TRIM(W2ISPT), ''),
            COALESCE(TRIM(W2IFEE), ''),
            COALESCE(TRIM(W2OUPR), ''),
            COALESCE(TRIM(W2QSTS), ''),
            COALESCE(TRIM(W2NSTS), ''),
            COALESCE(TRIM(W2VEND), ''),
            COALESCE(TRIM(W2VDNM), ''),
            COALESCE(TRIM(W2INVC), ''),
            COALESCE(TRIM(W2INDT), ''),
            COALESCE(TRIM(W2RSTK), ''),
            COALESCE(TRIM(W2CTCD), ''),
            COALESCE(TRIM(W2VSEQ), ''),
            COALESCE(TRIM(W2FDTX), ''),
            COALESCE(TRIM(W2AVCS), ''),
            COALESCE(TRIM(W2NAVD), ''),
            COALESCE(TRIM(W2NAPR), ''),
            COALESCE(TRIM(W2NADP), ''),
            COALESCE(TRIM(W2NADA), ''),
            COALESCE(TRIM(W2NAD2), ''),
            COALESCE(TRIM(W2NAD3), ''),
            COALESCE(TRIM(W2NAD4), ''),
            COALESCE(TRIM(W2NACD), ''),
            COALESCE(TRIM(W2NACR), ''),
            COALESCE(TRIM(W2NACP), ''),
            COALESCE(TRIM(W2CAMTGP), ''),
            COALESCE(TRIM(W2AMTGP), ''),
            COALESCE(TRIM(W2ACLN), ''),
            COALESCE(TRIM(W2GPDS), '')
        )) AS RECORD_CHECKSUM_HASH,
        CURRENT_TIMESTAMP() AS INGESTION_DTTM,
        CURRENT_DATE() AS INGESTION_DT,
        TO_TIMESTAMP_NTZ(TRIM(ENTRY_TIMESTAMP)) AS ENTRY_TIMESTAMP
    FROM {{ source('bronze_data', 'T_BRZ_ITEM_WOMSTI') }}
    -- {% if is_incremental() %}
    --     WHERE TO_TIMESTAMP_NTZ(TRIM(ENTRY_TIMESTAMP)) > (SELECT max_ts FROM max_loaded)
    -- {% endif %}
),

-- Step 2: Join with dimension tables and generate surrogate key as hash of natural keys
source_with_keys AS (
    SELECT
        ROW_NUMBER() OVER (
            ORDER BY sd.ENTRY_TIMESTAMP, sd.STORE_NUMBER, sd.WORK_ORDER_NUMBER, sd.ITEM_SEQ_NUMBER
        ) AS WORK_ORDER_ITEM_DETAILS_SK,
        sd.*,
        dp.PRODUCT_SK AS DIM_PRODUCT_SK,
        ic.INVENTORY_CATEGORY_SK AS DIM_INVENTORY_CATEGORY_SK
    FROM source_data sd
    LEFT JOIN  {{ source('silver_data', 'T_DIM_PRODUCT') }} dp
        ON sd.PRODUCT_SK = dp.PRODUCT_SK AND dp.IS_CURRENT_FLAG = TRUE
    LEFT JOIN {{ source('silver_data', 'T_DIM_INVENTORY_CATEGORY') }} ic
        ON sd.INVENTORY_CATEGORY_SK = ic.INVENTORY_CATEGORY_SK AND ic.IS_CURRENT_FLAG = TRUE
)

-- Final output
SELECT *
FROM source_with_keys
